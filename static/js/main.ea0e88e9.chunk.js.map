{"version":3,"sources":["components/Header.js","components/Grid.js","components/App.js","index.js"],"names":["Header","react_default","a","createElement","React","Component","Grid","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initializeArrays","newValues","state","values","i","j","parent","concat","size","setState","getRandomFromRange","min","max","Math","round","random","shuffleArray","array","length","floor","temp","findRoot","row","column","rootElement","union","rowP","columnP","rowQ","columnQ","rootP","rootQ","unionNeighbours","changeValueOfRandomCell","rowsKeys","keys","_loop2","rowKey","cellsOfRow","keysOfClosedCells","filter","key","finished","randomClosedCell","parseInt","newStateValues","v","_loop","_ret","percolates","checkIfDone","message","calculateResults","percolated","setTimeout","bind","assertThisInitialized","totalClosed","_loop3","percent","parseFloat","result","resultRef","current","scrollIntoView","behavior","checkIfMemberOfPercolation","winningParent","console","log","test","drawSquare","counter","val","color","className","style","backgroundColor","isopen","start","-1.-1","-2.-2","createRef","_this2","x","map","columnKey","onClick","ref","App","components_Header","components_Grid","render","components_App","document","querySelector"],"mappings":"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","file":"static/js/main.ea0e88e9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Header extends React.Component {\r\n\trender() {\r\n\t\treturn <h1>Percolation</h1>;\r\n\t}\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport Rectangle from \"./Rectangle.js\";\r\nclass Grid extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tvalues: {},\r\n\t\t\tmessage: \"Click start to begin\",\r\n\t\t\tresult: \"\",\r\n\t\t\tpercolated: false\r\n\t\t};\r\n\t\tthis.parent = {\r\n\t\t\t// {row.column}\r\n\t\t\t\"-1.-1\": \"-1.-1\", // Virtual top\r\n\t\t\t\"-2.-2\": \"-2.-2\" // Virtual bottom\r\n\t\t};\r\n\t\tthis.size = {\r\n\t\t\t\"-1.-1\": 1, // Virtual top\r\n\t\t\t\"-2.-2\": 1 // Virtual bottom\r\n\t\t};\r\n\t\tthis.finished = false;\r\n\t\tthis.resultRef = React.createRef();\r\n\t}\r\n\r\n\tinitializeArrays = () => {\r\n\t\tlet newValues = this.state.values;\r\n\t\tfor (let i = 0; i < 10; i++) {\r\n\t\t\tnewValues[i] = {};\r\n\t\t\tfor (let j = 0; j < 10; j++) {\r\n\t\t\t\tthis.parent[`${i}.${j}`] = `${i}.${j}`;\r\n\t\t\t\tthis.size[`${i}.${j}`] = 1;\r\n\t\t\t\tnewValues[i][j] = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tvalues: newValues\r\n\t\t});\r\n\t};\r\n\r\n\tgetRandomFromRange = (min, max) => {\r\n\t\treturn Math.round(Math.random() * (max - min) + min);\r\n\t};\r\n\r\n\tshuffleArray = array => {\r\n\t\tfor (var i = array.length - 1; i > 0; i--) {\r\n\t\t\tvar j = Math.floor(Math.random() * (i + 1));\r\n\t\t\tvar temp = array[i];\r\n\t\t\tarray[i] = array[j];\r\n\t\t\tarray[j] = temp;\r\n\t\t}\r\n\t\treturn array;\r\n\t};\r\n\tfindRoot = (row, column) => {\r\n\t\tlet rootElement = `${row}.${column}`;\r\n\t\twhile (rootElement != this.parent[rootElement])\r\n\t\t\trootElement = this.parent[rootElement];\r\n\t\treturn rootElement;\r\n\t};\r\n\tunion = (rowP, columnP, rowQ, columnQ) => {\r\n\t\tlet rootP = this.findRoot(rowP, columnP);\r\n\t\tlet rootQ = this.findRoot(rowQ, columnQ);\r\n\t\tif (rootP === rootQ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (this.size[rootP] < this.size[rootQ]) {\r\n\t\t\tthis.parent[rootP] = rootQ;\r\n\t\t\tthis.size[rootQ] += this.size[rootP];\r\n\t\t} else {\r\n\t\t\tthis.parent[rootQ] = rootP;\r\n\t\t\tthis.size[rootP] += this.size[rootQ];\r\n\t\t}\r\n\t};\r\n\tunionNeighbours = (row, column) => {\r\n\t\tif (column > 0) {\r\n\t\t\tif (this.state.values[row][column - 1] == 1) {\r\n\t\t\t\tthis.union(row, column, row, column - 1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (column < 9) {\r\n\t\t\tif (this.state.values[row][column + 1] == 1) {\r\n\t\t\t\tthis.union(row, column, row, column + 1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (row > 0) {\r\n\t\t\tif (this.state.values[row - 1][column] == 1) {\r\n\t\t\t\tthis.union(row, column, row - 1, column);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (row < 9) {\r\n\t\t\tif (this.state.values[row + 1][column] == 1) {\r\n\t\t\t\tthis.union(row, column, row + 1, column);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (row == 0) {\r\n\t\t\tthis.union(row, column, -1, -1);\r\n\t\t}\r\n\t\tif (row == 9) {\r\n\t\t\tthis.union(row, column, -2, -2);\r\n\t\t}\r\n\t};\r\n\tchangeValueOfRandomCell = () => {\r\n\t\tvar rowsKeys = this.shuffleArray(Object.keys(this.state.values));\r\n\t\tfor (let i = 0; i < rowsKeys.length; i++) {\r\n\t\t\tvar rowKey = rowsKeys[i];\r\n\t\t\tlet cellsOfRow = this.state.values[rowKey];\r\n\t\t\tlet keysOfClosedCells = Object.keys(cellsOfRow).filter(\r\n\t\t\t\tkey => cellsOfRow[key] === 0\r\n\t\t\t);\r\n\t\t\tif (keysOfClosedCells.length === 0 && i === rowsKeys.length - 1) {\r\n\t\t\t\tthis.finished = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (keysOfClosedCells.length === 0) continue;\r\n\r\n\t\t\tvar randomClosedCell =\r\n\t\t\t\tkeysOfClosedCells[\r\n\t\t\t\t\tthis.getRandomFromRange(0, keysOfClosedCells.length - 1)\r\n\t\t\t\t];\r\n\r\n\t\t\trowKey = parseInt(rowKey);\r\n\t\t\trandomClosedCell = parseInt(randomClosedCell);\r\n\r\n\t\t\tthis.unionNeighbours(rowKey, randomClosedCell);\r\n\r\n\t\t\tlet newStateValues = this.state.values;\r\n\t\t\tnewStateValues[rowKey][randomClosedCell] = 1;\r\n\r\n\t\t\tthis.setState({ values: newStateValues });\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\tpercolates = () => {\r\n\t\treturn this.findRoot(-1, -1) == this.findRoot(-2, -2);\r\n\t};\r\n\r\n\tcheckIfDone = () => {\r\n\t\tif (this.percolates() || this.finished) {\r\n\t\t\tthis.setState({ message: \"Percolates!\" });\r\n\t\t\tthis.calculateResults();\r\n\t\t\tthis.setState({ percolated: true });\r\n\t\t} else {\r\n\t\t\tsetTimeout(\r\n\t\t\t\tfunction() {\r\n\t\t\t\t\tthis.changeValueOfRandomCell();\r\n\t\t\t\t\tthis.checkIfDone();\r\n\t\t\t\t}.bind(this),\r\n\t\t\t\t100\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\tcalculateResults = () => {\r\n\t\tlet totalClosed = 0;\r\n\t\tlet rowsKeys = Object.keys(this.state.values);\r\n\t\tfor (let i = 0; i < rowsKeys.length; i++) {\r\n\t\t\tlet rowKey = rowsKeys[i];\r\n\t\t\tlet cellsOfRow = this.state.values[rowKey];\r\n\t\t\ttotalClosed += Object.keys(cellsOfRow).filter(\r\n\t\t\t\tkey => cellsOfRow[key] === 0\r\n\t\t\t).length;\r\n\t\t}\r\n\t\tlet percent = (100 - parseFloat(totalClosed)) / 100;\r\n\t\tthis.setState({ result: `${percent}` });\r\n\t\tthis.resultRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n\t};\r\n\tcheckIfMemberOfPercolation = (row, column) => {\r\n\t\tif (this.state.percolated == false) return false;\r\n\t\tlet winningParent = this.findRoot(-1, -1);\r\n\t\tconsole.log(winningParent);\r\n\r\n\t\tlet test = Object.keys(this.parent).filter(\r\n\t\t\tkey => this.parent[key] === winningParent\r\n\t\t);\r\n\t\tconsole.log(test);\r\n\t};\r\n\r\n\tdrawSquare = (row, column, counter, val) => {\r\n\t\tlet ifInPercolatingGroup = this.checkIfMemberOfPercolation(row, column);\r\n\t\tlet color = \"#6c5aa6\";\r\n\t\tval === 1 ? (color = \"#f36e62\") : (color = \"#6c5aa6\");\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tclassName=\"square\"\r\n\t\t\t\tstyle={{ backgroundColor: color }}\r\n\t\t\t\tkey={counter}\r\n\t\t\t\tisopen={val}\r\n\t\t\t>\r\n\t\t\t\t{counter}\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\tstart = () => {\r\n\t\tthis.setState({ message: \"In progress\" });\r\n\t\tthis.checkIfDone();\r\n\t};\r\n\tcomponentDidMount() {\r\n\t\tthis.initializeArrays();\r\n\t}\r\n\tcomponentDidUpdate() {}\r\n\trender() {\r\n\t\tvar x = -1;\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<div>{this.state.message}</div>\r\n\t\t\t\t{Object.keys(this.state.values).map(rowKey => {\r\n\t\t\t\t\treturn Object.keys(this.state.values[rowKey]).map(\r\n\t\t\t\t\t\tcolumnKey => {\r\n\t\t\t\t\t\t\tx++;\r\n\t\t\t\t\t\t\treturn this.drawSquare(\r\n\t\t\t\t\t\t\t\trowKey,\r\n\t\t\t\t\t\t\t\tcolumnKey,\r\n\t\t\t\t\t\t\t\tx,\r\n\t\t\t\t\t\t\t\tthis.state.values[rowKey][columnKey]\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName=\"button btn btn-success btn-block\"\r\n\t\t\t\t\tonClick={this.start}\r\n\t\t\t\t>\r\n\t\t\t\t\tStart\r\n\t\t\t\t</button>\r\n\t\t\t\t<div ref={this.resultRef}>{this.state.result}</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Grid;\r\n","import React from \"react\";\r\nimport Header from \"./Header.js\";\r\nimport Grid from \"./Grid.js\";\r\n\r\nclass App extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Header />\r\n\t\t\t\t<Grid />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport App from \"./components/App.js\";\r\nimport \"./css/bootstrap.min.css\";\r\nimport \"./css/style.css\";\r\n\r\nrender(<App />, document.querySelector(\"#main\"));\r\n"],"sourceRoot":""}